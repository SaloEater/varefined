local NPC = require "illish.lib.npc"
local BEH = require "illish.lib.beh"

printf("Patching idiots_keybinds for axr_companions voiceover support...")
if not NPC or not BEH or not axr_companions or not idiots_keybinds then
    printf("NPC, BEH, axr_companions or idiots_keybinds not found. Skipping patch.")
    return
end

beh_clear_waypoints = BEH.clearWaypoints
function BEH.clearWaypoints(npc)
    beh_clear_waypoints(npc)
    axr_companions.voiceover_companion_remove_waypoints()
end

beh_add_waypoint = BEH.addWaypoint
function BEH.addWaypoint(npc, pos)
    beh_add_waypoint(npc, pos)
    axr_companions.voiceover_companion_add_waypoints()
end

local idiots_keybinds_playVoiceover = idiots_keybinds.playVoiceover
function idiots_keybinds.playVoiceover(group, action, GUI)
    local enabled = NPC.getState(GUI.ID, group, action)

    if group == "movement" and action == "cover" and not enabled then
        axr_companions.voiceover_companion_hide_in_cover()
    end

    if group == "movement" and action == "wait" and not enabled then
        axr_companions.voiceover_companion_to_wait_state()
    end

    if group == "movement" and action == "patrol" and not enabled then
        axr_companions.voiceover_companion_to_patrol_state()
    end

    if group == "movement" and action == "follow" and not enabled then
        axr_companions.voiceover_companion_to_follow_state()
    end

    if group == "readiness" and action == "attack" and not enabled then
        axr_companions.voiceover_companion_to_attack_state()
    end

    if group == "readiness" and action == "ignore" and not enabled then
        axr_companions.voiceover_companion_to_ignore_combat_state()
    end

    if group == "combat" and action == "support" and not enabled then
        axr_companions.voiceover_companion_to_attack_only_actor_combat_enemy_state()
    end

    if group == "combat" and action == "support" and not enabled then
        axr_companions.voiceover_companion_to_attack_only_actor_combat_enemy_state()
    end

    if group == "stance" and action == "sneak" and not enabled then
        axr_companions.voiceover_companion_to_attack_only_actor_combat_enemy_state()
    end

    if group == "jobs" and (action == "loot_corpses" or action == "loot_items") then
        local loot_items_enabled = get_is_loot_items_enabled(action, enabled, GUI)
        local loot_corpses_enabled = get_is_loot_corpses_enabled(action, enabled, GUI)

        if loot_items_enabled and loot_corpses_enabled then
            axr_companions.voiceover_companion_to_loot_items_and_corpses()
        elseif loot_corpses_enabled then
            axr_companions.voiceover_companion_to_loot_corpses_only()
        elseif loot_items_enabled then
            axr_companions.voiceover_companion_to_loot_items_only()
        else
            axr_companions.voiceover_companion_to_loot_nothing()
        end
    end

    if group == "distance" and action == "near" and not enabled then
        axr_companions.voiceover_companion_to_stay_close()
    end

    if group == "distance" and action == "far" and not enabled then
        axr_companions.voiceover_companion_to_stay_far()
    end

    if group == "distance" and action == "normal" and not enabled then
        local is_far = NPC.getState(GUI.ID, "distance", "normal")
        if is_far then
            axr_companions.voiceover_companion_to_come_closer()
        else
            axr_companions.voiceover_companion_to_move_away()
        end
    end
end

function get_is_loot_items_enabled(action, enabled, GUI)
    if action == "loot_items" then
        return not enabled
    end

    return NPC.getState(GUI.ID, "jobs", "loot_items")
end

function get_is_loot_corpses_enabled(action, enabled, GUI)
    if action == "loot_corpses" then
        return not enabled
    end

    return NPC.getState(GUI.ID, "jobs", "loot_corpses")
end